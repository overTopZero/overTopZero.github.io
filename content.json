{"meta":{"title":"Craco的博客","subtitle":"一个热爱编程的程序猿","description":"辽宁科技大学08级, 就职于上海宏驰, 擅长iOS, web前端, 非专业视觉设计师。此为博客一枚。","author":"Craco","url":"http://zhulele90.cn"},"pages":[],"posts":[{"title":"js第二天","slug":"js第二天","date":"2017-05-16T09:36:49.000Z","updated":"2017-05-17T02:26:06.000Z","comments":true,"path":"2017/05/16/js第二天/","link":"","permalink":"http://zhulele90.cn/2017/05/16/js第二天/","excerpt":"Javascript 书写位置 变量等基础知识","text":"Javascript 书写位置 变量等基础知识 JavaScript 基础02书写位置基本代码: 分号不能省略 123&lt;script type=\"text/javascript\"&gt; &lt;/script&gt; 位置: 内嵌式: 可以放在任意位置, 因为html的编译顺序, 最好放在下面位置: 1234&lt;/body&gt;&lt;/html&gt;&lt;script type=\"text/javascript\"&gt;&lt;/script&gt; 外链式: 1&lt;script src=\"1.js\"&gt;&lt;/script&gt; 将多个JS文件合并成一个文件 输出消息的几种方式 alert comfirm 弹出框 console.log 控制台日志 prompt 接收用户输入信息 document.write 在页面输出信息 可以输出标签 变量变量是用来存储数据的容器 变量的命名规范 不能以数字或者纯数字开头来定义变量名 不推荐使用中文来定义变量名 不能使用特殊符号或者特殊符号开头(-除外) 不推荐使用关键字和保留字来定义变量名 在JS中严格区分大小写的！！！ 数据类型1. 简单数据类型 Number 数字类型 包含正数 负数 小数 字符串 String 凡是用双引号或者单引号引起的都是字符串。 布尔数据类型 Boolean 只有2个值一个是true, 一个是false. 实际运算中true=1,false=0 undefined 变量未初始化 定义了变量，没有给变量赋值 null 变量未引用 值为空 内存中没有 object 2. 复杂数据类型 object 对象 array 数组 3. 判断数据类型typeof() 运算符 比较运算符&lt; &gt; &lt;= &gt;= == != 算术运算符 “+” 加号 两个数字类型的变量相加，得到的是一个数字类型。 一个数字类型和一个字符串相加，得到的是一个字符串。 “—“ 减号 两个数字类型的变量相减，得到的是一个数字类型。 一个数字类型和一个数字字符串相减，得到的是一个数字类型。 一个数字类型和一个非数字字符串相减，得到的是NaN(not a number),是一个数字类型。 “/“ 除号 两个数字类型的变量相除，得到的是一个数字类型。 一个数字类型和一个数字字符串相除，得到的是一个数字类型。 一个数字类型和一个非数字字符串相除，得到的是NaN,是一个数字类型。 0做为除数的时候，得到结果 Infinity （无限大），是一个数字类型。 “%” 取余数 优先级 有()先计算()里边的 Date对象Date对象用于处理日期和时间 12345678910&lt;script type=\"text/javascript\"&gt; var mydate=new Date();//通过new方法创建对象 alert(Date()); // 返回一个完整的日期时间 alert(mydate.getDay());//返回当前是周几 alert(mydate.getMonth()+1);//返回当前月份 alert(mydate.getFullYear());//返回当前年份 alert(mydate.getHours());//返回当前小时 alert(mydate.getMinutes());//返回当前分钟 alert(mydate.getSeconds());//返回当前秒数&lt;/script&gt; Math对象对象123456789101112131415&lt;script type=\"text/javascript\"&gt; var n1=12; var n2=1.23; var n3=3.98; var n4=-12.01; var n5=Math.ceil(n4); //天花板函数 向上去整 var n5=Math.floor(n4); // 向下舍入 var n5=Math.max(n1,n4); //取的是两个数的最大值 var n5=Math.min(n3,n1); //返回是两个数的最小值 var n5=Math.pow(n1,n2); //返回n1的n2次方 var n5=Math.round(n4); // 进行四舍五入操作 var n5=Math.random(); //返回0-1之间的随机数 不包括0和1 alert(n5);&lt;/script&gt; 数据类型转换12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;script type=\"text/javascript\"&gt;var n1=1; var n2=23.45; var n3=-34.1; // 数字转字符串 三种方法 var n1=String(n1);// 数字转字符串 var n5=n2.toString();// 变量转字符串 alert(n5); alert(typeof(n5)); var n1=\"123\"; var n2=\"12abc\"; var n3=\"mylove\"; var n4=\"14期威武\"; var n6=\"-5.93\"; // 字符串转数字 三种方法 /* Number() 1.数字类型的字符串，转换之后得到的数字 2.非数字字符串，转换之后得到是NaN 3.小数类型的字符串，转换之后得到的是原数字 */ var n5=Number(n1); /* parseInt() 1.整数数字类型的字符串，转换之后得到的整数数字。 2.数字开头的字符串，转换之后得到的是前边的数字。 3.非数字开头的字符串，转换之后得到的是NaN。 4.小数类型的字符串，转换之后取整。 */ var n5=parseInt(n1); /* parseFloat() 1.整数数字类型的字符串，转换之后得到的整数数字。 2.数字开头的字符串，转换之后得到的是前边的数字。 3.非数字开头的字符串，转换之后得到的是NaN。 4.小数类型的字符串，转换之后得到的是原数字。 */ var n5=parseFloat(n6); alert(n5); alert(typeof(n5)); var n1=123; var n2=\"345\"; var n3; var n4=null; var n6=0; var n7=Infinity; // 转布尔类型 var n5=Boolean(n7); /* 1.数字和字符串转完之后为true。 2.undefined、null、0转完之后为false. */ alert(n5); alert(typeof(n5)); // 隐式数据类型转换 var n1=12; var n2=\"3\"; var n3=n1-n2; alert(n2); alert(typeof(n2));&lt;/script&gt; 运算符 逻辑运算符 且&amp;&amp; 两个表达式为true的时候，结果为true 或|| 只要有一个表达式为true,结果为true 非！ 和表达式相反的结果 等号运算符 “=”赋值运算符 “==”只判断内容是否相同，不判断数据类型。 “===”不仅判断内容，还判断数据类型是否相同。 ！= 只判断内容是否不相同，不判断数据类型。 ！==不全等于 不仅判断内容是否不相同，还判断数据类型是否不相同。 变量的集体声明1var n1=1,n2=2,n3=3;n1+=n2;//变量的集体声明 几种语句 switch语句 123456789101112131415161718192021222324252627var fruit=prompt(\"请输入您喜欢吃的水果\");// switch后边的变量和case后边值的数据类型必须保持一致 switch(fruit)&#123; case \"苹果\": alert(\"您喜欢吃的是苹果\"); break; //阻断代码执行 case \"香蕉\": alert(\"您喜欢吃的是香蕉\"); break; case \"葡萄\": alert(\"您喜欢吃的是葡萄\"); break; default: alert(\"口味真重\"); break; &#125; // 可以对变量进行集体判断 switch(fruit)&#123; case \"苹果\": case \"香蕉\": case \"葡萄\":// case值的集体声明 alert(\"您喜欢吃水果\"); break; default: alert(\"口味真重\"); break; &#125; 自增自减 i++ ++i –i i– 1234567891011var n1=123;// 在不参与运算的情况下，i++和++i都是在变量的基础加1n1++; //==&gt;n1=n1+1; 在变量原来的基础上加1++n1; //==&gt;n1=n1+1; 在变量原来的基础上加1alert(n1);// 在参与运算的情况下var n1=123;var n2=n1++; //先将n1赋值给n2，之后n1再自增var n2=++n1; //n1先自增，在赋值给n2alert(n2);alert(n1); 数组12345678910111213141516171819202122232425262728293031&lt;script type=\"text/javascript\"&gt; // 数组的定义 var ary1=new Array(); //用new方法来创建一个数组 var ary1=[]; //直接创建一个数组 ary1[0]=12; //通过下标给数组赋值 ary1[1]=23; ary1[2]=\"中国人\"; ary1[3]=\"美国人\"; alert(ary1); //显示数组 //数组的初始化 var ary1=[12,23,45,\"中国人\",\"34\"]; alert(ary1); // 数组的遍历 for(var i=0; i&lt;5; i++)&#123; alert(ary1[i]); &#125; // length属性代表数组数据的个数 var ary=[1,\"2k\",\"e3\",43,23,23,54,65,\"y5\",\"y6\",7]; for(var i=0;i&lt;ary.length; i++)&#123; alert(ary[i]); &#125; var ary1=[2,23,32,21,345,46]; var ary2=[2,3,4,8,12,\"来两串\"]; // 数组的合并 var ary3=ary1.concat(ary2); // 返回一个数组 alert(ary3); var ary1=[2,23,32,21,345,46,\"中国人\"]; var ary2=ary1.join(\"&amp;\"); // 返回一个字符串 alert(ary2); alert(typeof(ary2)); &lt;/script&gt; 函数1234function test()&#123; //通过function创建函数 alert(\"乐乐牛\"); &#125; test(); //函数调用","categories":[],"tags":[{"name":"1","slug":"1","permalink":"http://zhulele90.cn/tags/1/"}]},{"title":"js第一天","slug":"js第一天","date":"2017-05-15T14:54:13.000Z","updated":"2017-05-17T02:26:50.000Z","comments":true,"path":"2017/05/15/js第一天/","link":"","permalink":"http://zhulele90.cn/2017/05/15/js第一天/","excerpt":"Javascript 历史 特点等基础知识","text":"Javascript 历史 特点等基础知识 JavaScript基础(Day1)JavaScript历史34岁的系统程序员Brendan Eich（布兰登·艾奇）, 1995年4月, 网景公司录用了他, 1995年5月他只用10天时间就把Javascript设计出来. 1995.2月 Netscape公司发布LiveScript，后临时改为JavaScript，为了赶上Java的热浪 1997 年，以JavaScript 1.1 为基础。由来自 Netscape、Sun、微软、Borland 和其他一些对脚本编程感兴趣的公司的程序员组成的 TC39（ECMA的小组） 锤炼出了 ECMA-262，也就是ECMAScript1.0。 1998年6月，ECMAScript 2.0版发布。 1999年12月，ECMAScript 3.0版发布，成为JavaScript的通行标准，得到了广泛支持. 2007年10月，ECMAScript 4.0版草案发布：分歧太大，失败告终。 2009年12月，ECMAScript 5.0版正式发布. 2015年6月17日，ECMAScript 6发布正式版本，即ECMAScript 2015。 认识JavaScriptJavaScript是一种网页编程技术, 就是一种基于对象和事件驱动，并具有安全性能的脚本语言,可以被嵌入到HTML文件中，不需要经过Web服务器就可以对用户操作作出响应. 组成 ECMAScript：JavaScript的语法标准。 DOM：JavaScript操作网页上的元素的API BOM：JavaScript操作浏览器的部分功能的API 特点 简单易用 可以使用任何文本编辑工具编写 只需要浏览器就可以执行程序 解释执行（解释语言） 事先不编译 逐行执行 无需进行严格的变量声明 基于对象 内置大量现成对象，编写少量程序可以完成目标","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://zhulele90.cn/tags/Javascript/"}]}]}